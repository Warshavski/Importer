+---------------------+
| Importer solution # |
+---------------------+

----- TODO: -----

-----------
# GENERAL #
-----------
1. Add dependency injection
2. Add and implement Ninject for dependency injection.
3. Da Fuck! Architecture again!
4. Add Exception handling

---------------
# BY PROJECTS #
---------------
1. Importer.Common
    - Logging - implement logging (log4net).
    - Constant - replace by enum or check what gonna be better.
    - ColumnsMapping - redisign class (store tables mappings and list of 
	columns mapping for each table mapping) or delete this class and
	transfer only primitives to DAL.

2. Importer.Data
    - GENERAL - ?? create entity for data ??
    - Entities (at all) - rename Table/Column to TableMetaData/ColumnMetaData. 
    - Entities (Column) - redisign class. Do something with datatype and/or 
	add more meta data.
    - Processors (IDataImportProcessor) - unify interface.
    - Processors (IDataReaderProcessor) - unify interface.
    - DbCommonHelper - add fuction for data access and return.

3. Importer.Data.(Sql, OleDb, Xml...)	
    - (Sql, OleDb)MetaDataProcessor - unify and replace to separate class
	(Methods are same in both classes, difference are only in connection).

4. Importer.Models
    - Table/Column - ?? how to mark for import and create mappings. ??
    - Repository/Service - replace to separate project or leave this classes in model.
